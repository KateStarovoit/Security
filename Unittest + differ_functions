import random
from itertools import cycle
from math import *


def encode_super_Cesar(strng,n):
    lst = []
    count = -1
    for i in strng:
        count += 1
        if i == " ":
            lst.append(count)
    for k in range(n):
        strng = strng.replace(" ", "")
        strng = strng.split()
        strng = strng[0][len(strng) - n - 1:] + strng[0][:len(strng) - n - 1]
        for i in range(len(lst)):
            strng = strng[:lst[i]] + " " + strng[lst[i]:]
        strng = strng.split(" ")
        for i in range(len(strng)):
            for j in range(n):
                strng[i] = strng[i][-1] + strng[i][:-1]
        result = ""
        for i in range(len(strng)):
            if i == len(strng) - 1:
                result += strng[i]
            else:
                result += strng[i] + " "
        strng = result
    return strng


def encode_railway(strng,n):
    # x=random()
    # print(strng)
    # strng=str(x)[:10]+strng[:]
    # print(strng)
    count = 1
    mem = ""
    lst = []
    returned_str = ""
    for i in range(len(strng)):
        if count == n:
            lst.append((strng[i], count))
            count -= 1
            mem = "-"
        elif count == 1:
            lst.append((strng[i], count))
            count += 1
            mem = "+"
        elif mem == "+":
            lst.append((strng[i], count))
            count += 1
        elif mem == "-":
            lst.append((strng[i], count))
            count -= 1

    def takeSecond(elem):
        return elem[1]

    lst.sort(key=takeSecond)
    for i in lst:
        returned_str += i[0]
    return returned_str

def encode_vijen(strng,n):
    coding_word = "drebotiy"
    keytext = ""

    if len(keytext) >= n:
        keytext = coding_word;
    else:
        while True:
            if len(keytext) < n:
                keytext = keytext + coding_word
                continue
            elif len(keytext) >= n:
                break

    alp = 'abcdefghijklmnopqrstuvwxyz.,@/ABCDEFGHIJKLMNOPQRSTUVWXYZ~`!#$%^&*() _+-=:.<>?/1234567890'
    f = lambda arg: alp[(alp.index(arg[0]) + alp.index(arg[1]) % 88) % 88]
    return ''.join(map(f, zip(strng, cycle(keytext))))


def decode_vijn(coded_text, n):
    keytext = ""
    coding_word = "drebotiy"
    if len(keytext) >= n:
        keytext = coding_word;
    else:
        while True:
            if len(keytext) < n:
                keytext = keytext + coding_word
                continue
            elif len(keytext) >= n:
                break

    alp = 'abcdefghijklmnopqrstuvwxyz.,@/ABCDEFGHIJKLMNOPQRSTUVWXYZ~`!#$%^&*() _+-=:.<>?/1234567890'
    f = lambda arg: alp[alp.index(arg[0])-alp.index(arg[1])%88]
    return ''.join(map(f, zip(coded_text, cycle(keytext))))


def decode_railway(strng,n):
    def rail_pattern(n):
        r = list(range(n))
        return cycle(r + r[-2:0:-1])
    p = rail_pattern(n)
    indexes = sorted(range(len(strng)), key=lambda i: next(p))
    result = [''] * len(strng)
    for i, c in zip(indexes, strng):
        result[i] = c
    strng=''.join(result )
    # strng = strng[10:]
    return strng


def decode_super_Cesar(strng,n):
    strng = str(strng)
    count=-1
    lst=[]

    for i in strng:
        count+=1
        if i==" ":
            lst.append(count)
    for k in range(n):
        strng=strng.split(" ")
        for i in strng:
            if i=="":
                strng.remove(i)
        for i in range(len(strng)):
            for j in range(n):
                strng[i] = strng[i][1:]+strng[i][0]
        result=""
        for i in strng:
            result+=i
        strng=result
        strng = strng[n:] + strng[0:n]
        result=""
        for i in range(len(lst)):
            strng = strng[:lst[i]] +" "+strng[lst[i]:]
    return strng

def gener_RSA(key):
    lst=[]
    for i in range(500):
        x=""
        j=2
        while j<=sqrt(i):
            if i%j==0:
                x="y"
            j+=1
        if x=="":
            lst.append(i)
    # print(lst)
    lst.remove(0)
    lst.remove(1)
    # print(lst)
    p=random.choice(lst)
    q=random.choice(lst)
    n=p*q
    y=(p-1)*(q-1)
    for i in lst:
        if y<i:
            lst.remove(i)
    e=random.choice(lst)
    open_key=(e,n)
    d=1
    for i in range(1,1000000):
        if (i*e)%y==1:
            d=i
            break
    secret_key=(d,n)
    # print(key,"key")
    # print("---------------------------")
    # print(open_key,"open key")
    # print("---------------------------")
    # print(secret_key,"secret key")
    # print("---------------------------")
    return key , open_key,secret_key

def RSA_encoding(open_key,key):
    return key**open_key[0]%open_key[1]

def RSA_decoding(result_of_cipher,secret_key):
    return (result_of_cipher**secret_key[0])%secret_key[1]


###############################################################################################################
                                                    """Unit test"""
import unittest
from difer_functions import encode_railway, encode_super_Cesar, encode_vijen, decode_vijn, decode_railway, \
    decode_super_Cesar, gener_RSA,RSA_decoding,RSA_encoding


class TestStringMethods(unittest.TestCase):
    def test_encode_vijen(self):
        str1='l7ppFx>Ehsec'
        str2=encode_vijen('i love kebab',11)
        self.assertEqual(str1,str2)

    def test_encode_railway(self):
        str12='i love kebba'
        str2=encode_railway('i love kebab',11)
        self.assertEqual(str12,str2)

    def test_encode_SuperCesar(self):
        str1='i elov bkeba'
        str2=encode_super_Cesar('i love kebab',11)
        self.assertEqual(str1,str2)

    def test_decode_vijen(self):
        str1='i love kebab'
        str2=decode_vijn('l7ppFx>Ehsec',11)
        self.assertEqual(str1,str2)

    def test_decode_railway(self):
        str12='i love kebab'
        str2=decode_railway('i love kebba',11)
        self.assertEqual(str12,str2)

    def test_decode_SuperCesar(self):
        str1='i love kebab'
        str2=decode_super_Cesar('i elov bkeba',11)
        self.assertEqual(str1,str2)

    def test_RSA(self):
        A = gener_RSA(100)

        self.assertEqual((RSA_decoding(RSA_encoding(A[1], A[0]), A[2])),100)


if __name__ == '__main__':
    unittest.main()



